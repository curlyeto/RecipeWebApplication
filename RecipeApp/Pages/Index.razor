@page "/"
@using RecipeApp.ClassLibrary.Model
@inject NavigationManager NavigationManager
@using System.Text.Json
@using RecipeApp.Services;
@inject IRecipeService recipeService;

<PageTitle>Home</PageTitle>

<Virtualize Items="new List<IEnumerable<Recipe>> { TestList }">
    <ItemContent>
       
            <div class="row">
        @foreach (var item in context)
        {
                <div class="col m-5 bg-slate-500 border rounded" @onclick="() => DirectToDetailRecipe(item)">
                    <img class="ps-5 pt-1" src="@item.Image" height="200" width="200" />
                    <p class="pt-2">@item.Name</p>
                    <p>
                @item.Integrates
                    </p>
                </div>
        }
        </div>

   

    


    </ItemContent>
</Virtualize>

@code {
    private List<Recipe> TestList = new List<Recipe>();

    private Recipe recipe = new Recipe();
    private List<Recipe> userList = new List<Recipe>();
    protected override async Task OnInitializedAsync()
    {
         await getUsers();

    }
    private async Task getUsers()
    {
        TestList = await recipeService.getRecipes();
        Console.WriteLine("Recipe List Count " + userList.Count);
    }


    private void DirectToDetailRecipe(Recipe item)
    {
        var json = JsonSerializer.Serialize(item);
        var encodedJson = Uri.EscapeDataString(json);
        NavigationManager.NavigateTo($"/detailrecipe?data={encodedJson}");
    }

    protected override void OnInitialized()
    {

        TestList = GetRow();
    }

    List<Recipe> GetRow()
    {
        List<Recipe> rows = new List<Recipe>();
        int listIndex = 0;
        for (int k = 0; k < TestList.Count; k++)
        {

            for (int i = 0; i < 4; i++)
            {
                if (rows.Count == TestList.Count)
                {
                    break;
                
                }
                rows.Add(TestList[listIndex]);
                listIndex++;
            }
            if (rows.Count == TestList.Count)
            {
                break;

            }
           
        }
        
        return rows;
    }
}
