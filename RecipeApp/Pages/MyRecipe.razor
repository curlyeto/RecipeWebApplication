@page "/myrecipe"
@using RecipeApp.ClassLibrary.Model
@inject NavigationManager NavigationManager
@using RecipeApp.Helper;
@using RecipeApp.Services;
@inject IRecipeService recipeService;
@inject IJSRuntime JsRuntime
<PageTitle>My Recipe</PageTitle>

<Virtualize Items="new List<IEnumerable<Recipe>> { TestList }">
    <ItemContent>
        <div class="row">
            @foreach (var item in context)
            {
                <div class="col m-5 bg-slate-500 border rounded">
                    <img class="ps-5 pt-1" src="@item.Image" height="200" width="200" />
                    <p class="pt-2">@item.Name</p>
                    <p>
                        @item.Integrates
                    </p>
                    <button type="button" class="btn btn-warning" @onclick="(()=>EditRecipe(item))">Edit</button>
                    <button type="button" class="btn btn-danger" @onclick="(()=>DeleteRecipe(item))">Delete</button>
                </div>
            }
        </div>
    </ItemContent>
</Virtualize>

@code {
    private List<Recipe> TestList = new List<Recipe>();

    private Recipe recipe = new Recipe();

    private void EditRecipe(Recipe recipe)
    {
        NavigationManager.NavigateTo($"/editrecipe/{recipe.Id}");
    }
    private async void DeleteRecipe(Recipe recipe)
    {
        var response=await recipeService.deleteRecipe(recipe.Id);
        if (response)
        {
            TestList.Remove(recipe);
            StateHasChanged();
        }
      
        
      
    }
    protected override async Task OnInitializedAsync()
    {
        await getUserRecipes();

    }
    private async Task getUserRecipes()
    {
        UIHelper uIHelper = new UIHelper(JsRuntime);

        string userId = await uIHelper.readLocalStorage("userId");
        TestList = await recipeService.myRecipes(int.Parse(userId));
        Console.WriteLine("Recipe List Count " + TestList.Count);
    }
    protected override void OnInitialized()
    {

        TestList = GetRow();
    }

    List<Recipe> GetRow()
    {
        List<Recipe> rows = new List<Recipe>();
        int listIndex = 0;
        for (int k = 0; k < TestList.Count; k++)
        {

            for (int i = 0; i < 4; i++)
            {
                if (rows.Count == TestList.Count)
                {
                    break;

                }
                rows.Add(TestList[listIndex]);
                listIndex++;
            }
            if (rows.Count == TestList.Count)
            {
                break;

            }

        }

        return rows;
    }
}


